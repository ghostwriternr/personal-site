---
// Theme toggle component for dark/light mode switching
---

<button id="theme-toggle" class="bg-transparent border-none p-0" aria-label="Toggle theme">
    <svg id="sun-icon" class="cursor-pointer" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <circle cx="12" cy="12" r="4"></circle>
        <path d="M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7"></path>
    </svg>
    <svg id="moon-icon" class="cursor-pointer hidden" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z"></path>
        <path d="M17 4a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2"></path>
        <path d="M19 11h2m-1 -1v2"></path>
    </svg>
    <svg id="auto-icon" class="cursor-pointer hidden" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
        <path d="M4.731 19h11.539a1 1 0 0 0 .866 -1.5l-5.769 -10a1 1 0 0 0 -1.732 0l-5.769 10a1 1 0 0 0 .865 1.5" />
        <path d="M2 13h4.45" />
        <path d="M18 5l-4.5 6" />
        <path d="M22 9l-7.75 3.25" />
        <path d="M22 15l-7 -1.5" />
    </svg>
</button>

<script client:load>
    // Theme toggle functionality with Light/Dark/Auto modes
    function initThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');
        const autoIcon = document.getElementById('auto-icon');

        if (!themeToggle || !sunIcon || !moonIcon || !autoIcon) {
            console.error('Theme toggle elements not found');
            return;
        }

        // Get initial theme mode from localStorage or default to auto
        const getInitialThemeMode = () => {
            const stored = localStorage.getItem('theme-mode');
            return stored || 'auto';
        };

        // Get the effective theme based on mode and system preference
        const getEffectiveTheme = (mode) => {
            if (mode === 'auto') {
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            }
            return mode;
        };

        // Apply theme to document and update icons
        const applyTheme = (mode) => {
            const effectiveTheme = getEffectiveTheme(mode);

            // Store the mode (not the effective theme)
            localStorage.setItem('theme-mode', mode);

            // Apply the effective theme to the document
            document.documentElement.setAttribute('data-theme', effectiveTheme);

            // Update icons based on mode (not effective theme)
            // Hide all icons first
            sunIcon.classList.add('hidden');
            moonIcon.classList.add('hidden');
            autoIcon.classList.add('hidden');

            // Show the appropriate icon based on mode
            if (mode === 'light') {
                sunIcon.classList.remove('hidden');
            } else if (mode === 'dark') {
                moonIcon.classList.remove('hidden');
            } else if (mode === 'auto') {
                autoIcon.classList.remove('hidden');
            }
        };

        // Cycle through all three theme modes in order: auto -> opposite -> other -> auto
        const cycleTheme = () => {
            const currentMode = localStorage.getItem('theme-mode') || 'auto';
            const systemIsDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            let nextMode;

            // Determine the cycle order based on system theme
            const opposite = systemIsDark ? 'light' : 'dark';
            const other = systemIsDark ? 'dark' : 'light';

            switch (currentMode) {
                case 'auto':
                    nextMode = opposite;
                    break;
                case opposite:
                    nextMode = other;
                    break;
                case other:
                    nextMode = 'auto';
                    break;
                default:
                    nextMode = opposite;
                    break;
            }

            applyTheme(nextMode);
        };

        // Initialize theme
        const initialMode = getInitialThemeMode();
        applyTheme(initialMode);

        // Listen for system theme changes when in auto mode
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handleSystemThemeChange = () => {
            const currentMode = localStorage.getItem('theme-mode') || 'auto';
            if (currentMode === 'auto') {
                applyTheme('auto');
            }
        };

        mediaQuery.addEventListener('change', handleSystemThemeChange);

        // Toggle theme on click
        themeToggle.addEventListener('click', cycleTheme);
    }

    initThemeToggle();
</script>